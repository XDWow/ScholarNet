// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/XD/ScholarNet/cmd/pkg/wego"
	"github.com/XD/ScholarNet/cmd/ranking/grpc"
	"github.com/XD/ScholarNet/cmd/ranking/ioc"
	"github.com/XD/ScholarNet/cmd/ranking/repository"
	"github.com/XD/ScholarNet/cmd/ranking/repository/cache"
	"github.com/XD/ScholarNet/cmd/ranking/service"
	"github.com/google/wire"
	"github.com/gotomicro/redis-lock"
)

// Injectors from wire.go:

func Init() *wego.App {
	articleServiceClient := ioc.InitArticleRpcClient()
	interactiveServiceClient := ioc.InitInterActiveRpcClient()
	cmdable := ioc.InitRedis()
	redisRankingCache := cache.NewRedisRankingCache(cmdable)
	rankingLocalCache := cache.NewRankingLocalCache()
	rankingRepository := repository.NewCachedRankingRepository(redisRankingCache, rankingLocalCache)
	rankingService := service.NewBatchRankingService(articleServiceClient, interactiveServiceClient, rankingRepository)
	rankingServiceServer := grpc.NewRankingServiceServer(rankingService)
	server := ioc.InitGRPCxServer(rankingServiceServer)
	loggerV1 := ioc.InitLogger()
	client := rlock.NewClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, client, loggerV1)
	localCacheRefreshJob := ioc.InitLocalCacheRefreshJob(rankingRepository, loggerV1)
	cron := ioc.InitJobs(loggerV1, rankingJob, localCacheRefreshJob)
	app := &wego.App{
		GRPCServer: server,
		Cron:       cron,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(cache.NewRankingLocalCache, cache.NewRedisRankingCache, repository.NewCachedRankingRepository, service.NewBatchRankingService)

var thirdProvider = wire.NewSet(ioc.InitRedis, ioc.InitLogger, ioc.InitInterActiveRpcClient, ioc.InitArticleRpcClient, rlock.NewClient)

var cronJob = wire.NewSet(ioc.InitRankingJob, ioc.InitLocalCacheRefreshJob, ioc.InitJobs)
